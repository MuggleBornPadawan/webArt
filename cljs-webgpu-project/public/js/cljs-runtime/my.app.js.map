{"version":3,"sources":["my/app.cljs"],"mappings":";AAEA,qBAAA,rBAAKA;AAiBL,cAAA,dAAMC,oCAAoBC,OAA4BC,QAAQC;AAA9D,AACE,IAAMC,kBAAgB,AAAuBH;IACvCI,eAAiB,AAAoBH,AAAS;IAG9CI,yBAAuB,KAAAC;IACvBC,mBAAiB,KAAAD;AALvB,AAOE,kBAAA,jBAAMC,2BAAwBH;;AAC9B,kBAAA,gBAAA,OAAA,UAAA,UAAA,UAAA,tEAAMG;;AACN,kBAAA,YAAA,7BAAMA;;AACN,kBAAA,aAAA,9BAAMA;;AAEN,wBAAA,sBAAA,7CAAMF,8CAA+CE;;AAErD,IAAMC,qBAAa,AAAkBL,gCAAgBE;AAArD,AACE,AAAcG,+BAAaN;;AAC3B,wBAAA,IAAA,IAAA,IAAA,pCAAOM;;AACP,AAAMA;;OAEJR,PAAe,OAAA,oBAAA,CAAc,AAASG;;AAE9C,yBAAA,zBAAMM,0DAA+BT,OAAOU,cAAcC;AAA1D,AACE,IAAMC,aAAW,KAAAN;AAAjB,AACE,YAAA,YAAA,vBAAMM;;AACN,YAAA,eAAA,cAAA,xCAAMA;;AACN,IAAMC,qBAAa,KAAAP;AAAnB,AACE,oBAAA,nBAAMO,+BAAsBH;;AAC5B,oBAAA,gBAAA,nCAAMG;;AACN,YAAA,XAAMD,uBAAoBC;;AAC5B,IAAMC,uBAAe,KAAAR;IACfS,qBAAa,KAAAT;AADnB,AAEE,oBAAA,nBAAMS,+BAAsBJ;;AAC5B,sBAAA,rBAAMG,iCAAwBJ;;AAC9B,sBAAA,gBAAA,rCAAMI;;AACN,sBAAA,aAAA,lCAAMA,mCAA8BC;;AACpC,YAAA,XAAMH,yBAAsBE;;AAC9B,IAAME,WAAS,AAAuBhB,4BAAOY;AAA7C,AACE,YAAA,ZAACK,uCAA0CD;;AAC3CA;;AAEN,0BAAA,1BAAME,4DAAgClB,OAAemB;AAArD,AACE,IAAMC,SAAO,wBAAA,xBAAiBC;IACxBpB,UAAQ,kBAAA,lBAAamB;IACrBT,sBAAoB,AAA2BQ;AAFrD,AAGE,kBAAA,lBAAYlB,8BAAqBD,kBAAeW;;AAChD,YAAA,ZAACM;;AAJH,oBAKgBhB,mBAAgBU;;AAElC,cAAA,dAAeW;AAAf,AACE,IAAAC,qBAAa,AAAIC;AAAjB,AAAA,oBAAAD;AAAA,UAAAA,NAASJ;AAAT,AACE,AACE,YAAA,ZAACF;;OACG,AAAiBE,PACjB,iCAAO,WAAoBM;AAApB,AACE,YAAA,ZAACR,gCAAmCQ;;OAChC,AAAgBA,PAChB,oCAAO,WAAmBzB;AAAnB,AACE,YAAA,ZAACiB,+BAAkCjB;;AACnC,IAAM0B,cAAY,AAACR,wBAAiBlB,OAAOmB;IACrCT,gBAAc,0BAAA,1BAAqBV,oCAAkBF;IACrDI,kBAAgB,AAACO,uBAAgBT,OAAOU,cAAc,AAAUgB;AAFtE,AAGE,OAAC3B,YAAKC,OAAO,AAAW0B,oBAAaxB;GACzC,WAAKyB;AAAL,AACE,qBAAA,dAACC,sCAAyCD;;GACzD,WAAKA;AAAL,AACE,qBAAA,dAACC,2CAA8CD;;;AAC9D,qBAAA,dAACC","names":["my.app/shader-code","my.app/draw","device","context","render-pipeline","command-encoder","texture-view","render-pass-descriptor","js/Object","color-attachment","pass-encoder","my.app/create-pipeline","shader-module","presentation-format","descriptor","vertex-stage","fragment-stage","color-target","pipeline","js/console.log","my.app/configure-canvas","gpu","canvas","js/document","my.app/init","temp__5821__auto__","js/navigator","adapter","canvas-info","error","js/console.error"],"sourcesContent":["(ns my.app)\n\n(def shader-code \"\n  @vertex\n  fn vs_main(@builtin(vertex_index) in_vertex_index: u32) -> @builtin(position) vec4<f32> {\n    var pos = array<vec2<f32>, 3>(\n        vec2<f32>(0.0, 0.7),\n        vec2<f32>(-0.75, -0.75),\n        vec2<f32>(0.75, -0.75)\n    );\n    return vec4<f32>(pos[in_vertex_index], 0.0, 1.0);\n  }\n\n  @fragment\n  fn fs_main() -> @location(0) vec4<f32> {\n    return vec4<f32>(1.0, 0.0, 0.0, 1.0); // Return red\n  }\n\")\n\n(defn draw [^js/GPUDevice device ^js/GPUCanvasContext context render-pipeline]\n  (let [command-encoder (.createCommandEncoder device)\n        texture-view (-> (.getCurrentTexture context) (.createView))\n        \n        ;; Manually build the descriptor to fix the bug\n        render-pass-descriptor (js/Object.)\n        color-attachment (js/Object.)]\n    \n    (aset color-attachment \"view\" texture-view)\n    (aset color-attachment \"clearValue\" #js {:r 0.1 :g 0.1 :b 0.1 :a 1.0})\n    (aset color-attachment \"loadOp\" \"clear\")\n    (aset color-attachment \"storeOp\" \"store\")\n\n    (aset render-pass-descriptor \"colorAttachments\" #js [color-attachment])\n        \n    (let [pass-encoder (.beginRenderPass command-encoder render-pass-descriptor)]\n      (.setPipeline pass-encoder render-pipeline)\n      (.draw pass-encoder 3 1 0 0)\n      (.end pass-encoder))\n    \n    (-> device .-queue (.submit #js [(.finish command-encoder)]))))\n\n(defn create-pipeline [^js/GPUDevice device shader-module presentation-format]\n  (let [descriptor (js/Object.)]\n    (aset descriptor \"layout\" \"auto\")\n    (aset descriptor \"primitive\" #js {:topology \"triangle-list\"})\n    (let [vertex-stage (js/Object.)]\n      (aset vertex-stage \"module\" shader-module)\n      (aset vertex-stage \"entryPoint\" \"vs_main\")\n      (aset descriptor \"vertex\" vertex-stage))\n    (let [fragment-stage (js/Object.)\n          color-target (js/Object.)]\n      (aset color-target \"format\" presentation-format)\n      (aset fragment-stage \"module\" shader-module)\n      (aset fragment-stage \"entryPoint\" \"fs_main\")\n      (aset fragment-stage \"targets\" #js [color-target])\n      (aset descriptor \"fragment\" fragment-stage))\n    (let [pipeline (.createRenderPipeline device descriptor)]\n      (js/console.log \"Render pipeline created!\" pipeline)\n      pipeline)))\n\n(defn configure-canvas [^js/GPUDevice device ^js/GPU gpu]\n  (let [canvas (.getElementById js/document \"webgpu-canvas\")\n        context (.getContext canvas \"webgpu\")\n        presentation-format (.getPreferredCanvasFormat gpu)]\n    (.configure context #js {:device device :format presentation-format})\n    (js/console.log \"Canvas configured successfully.\")\n    #js {:context context :format presentation-format}))\n\n(defn ^:export init []\n  (if-let [gpu (-> js/navigator .-gpu)]\n    (do\n      (js/console.log \"Success! This browser supports WebGPU.\")\n      (-> (.requestAdapter gpu)\n          (.then (fn [^js/GPUAdapter adapter]\n                   (js/console.log \"Adapter received!\" adapter)\n                   (-> (.requestDevice adapter)\n                       (.then (fn [^js/GPUDevice device]\n                                (js/console.log \"Device received!\" device)\n                                (let [canvas-info (configure-canvas device gpu)\n                                      shader-module (.createShaderModule device #js {:code shader-code})\n                                      render-pipeline (create-pipeline device shader-module (.-format canvas-info))]\n                                  (draw device (.-context canvas-info) render-pipeline)))\n                              (fn [error]\n                                (js/console.error \"Failed to get device.\" error)))))\n                 (fn [error]\n                   (js/console.error \"Failed to get GPU adapter.\" error)))))\n    (js/console.error \"Sorry, this browser does not support WebGPU.\")))\n"]}