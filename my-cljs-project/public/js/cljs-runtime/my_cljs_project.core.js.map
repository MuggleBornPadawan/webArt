{"version":3,"sources":["my_cljs_project/core.cljs"],"mappings":";AAMA,2BAAA,3BAAMA;AAAN,AACE,IAAMC,eAAa,AAACC,gDAAO,KAAAC;IACrBC,QAAM,6CAAA,7CAACC;AADb,AAEE,+DAAA,2CAAA,nGAACC,uLAEC;AAAA,AACE,OAACC,sBAAOH,MAAM,YAAA,ZAACI;AAAD,AACE,OAACD,sBAAON,aAAa,KAAAE;GADvB;GAHlB,0FAOE;AAAA,AACE,qBAAA,AAAAM,dAACC,8BAAkBN;GARvB,yEAUE;AAAA,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,oCAAA,mFAAA,8CAAA,wBAG+B,4CAAA,AAAAK,gBAAMR;;;AAE3C,4BAAA,5BAAeU;AAAf,AACE,IAAMC,OAAK,AAACC,6DAAiB,wBAAA,xBAAiBC;AAA9C,AACE,oEAAA,7DAACC,wDAAYH,wFAAMZ","names":["my-cljs-project.core/app","current-time","reagent.core.atom","js/Date","timer","cljs.core.atom","reagent.core.create_class","cljs.core/reset!","js/setInterval","cljs.core/deref","js/clearInterval","my-cljs-project.core/init","root","reagent.dom.client.create_root","js/document","reagent.dom.client.render"],"sourcesContent":[";; src/main/core.cljs\n\n(ns my-cljs-project.core\n  (:require [reagent.core :as r]\n            [reagent.dom.client :as rdom]))\n\n(defn app []\n  (let [current-time (r/atom (js/Date.))\n        timer (atom nil)]\n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (reset! timer (js/setInterval\n                       #(reset! current-time (js/Date.))\n                       1000)))\n      :component-will-unmount\n      (fn []\n        (js/clearInterval @timer))\n      :reagent-render\n      (fn []\n        [:div\n         [:h1 \"Hello from ClojureScript!\"]\n         [:p \"The current time is: \" (str @current-time)]])})))\n\n(defn ^:export init []\n  (let [root (rdom/create-root (.getElementById js/document \"app\"))]\n    (rdom/render root [app])))\n\n;;(ns my-cljs-project.core\n;;  (:require [reagent.dom.client :as rdom]))\n;;\n;;(defn app []\n;;  [:div\n;;   [:h1 \"Hello from ClojureScript!\"]\n;;   [:p \"Isn't this neat??? what's the time\"]])\n;;\n;;(defn ^:export init []\n;;  (let [root (rdom/create-root (.getElementById js/document \"app\"))]\n;;    (rdom/render root [app])))\n;;\n"]}